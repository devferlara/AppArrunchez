package arrunchez.baumsoft.con.lafamiliaarrunchez.gendao;

import arrunchez.baumsoft.con.lafamiliaarrunchez.gendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CALIFICACIONES".
 */
public class Calificaciones {

    private Long id;
    private String date;
    private long participante_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CalificacionesDao myDao;

    private Participantes participantes;
    private Long participantes__resolvedKey;


    public Calificaciones() {
    }

    public Calificaciones(Long id) {
        this.id = id;
    }

    public Calificaciones(Long id, String date, long participante_id) {
        this.id = id;
        this.date = date;
        this.participante_id = participante_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCalificacionesDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public long getParticipante_id() {
        return participante_id;
    }

    public void setParticipante_id(long participante_id) {
        this.participante_id = participante_id;
    }

    /** To-one relationship, resolved on first access. */
    public Participantes getParticipantes() {
        long __key = this.participante_id;
        if (participantes__resolvedKey == null || !participantes__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ParticipantesDao targetDao = daoSession.getParticipantesDao();
            Participantes participantesNew = targetDao.load(__key);
            synchronized (this) {
                participantes = participantesNew;
            	participantes__resolvedKey = __key;
            }
        }
        return participantes;
    }

    public void setParticipantes(Participantes participantes) {
        if (participantes == null) {
            throw new DaoException("To-one property 'participante_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.participantes = participantes;
            participante_id = participantes.getId();
            participantes__resolvedKey = participante_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
