package arrunchez.baumsoft.con.lafamiliaarrunchez.gendao;

import arrunchez.baumsoft.con.lafamiliaarrunchez.gendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "PARTICIPANTES".
 */
public class Participantes {

    private Long id;
    /** Not-null value. */
    private String participante;
    private long avatar_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ParticipantesDao myDao;

    private Avatars avatars;
    private Long avatars__resolvedKey;


    public Participantes() {
    }

    public Participantes(Long id) {
        this.id = id;
    }

    public Participantes(Long id, String participante, long avatar_id) {
        this.id = id;
        this.participante = participante;
        this.avatar_id = avatar_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getParticipantesDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getParticipante() {
        return participante;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setParticipante(String participante) {
        this.participante = participante;
    }

    public long getAvatar_id() {
        return avatar_id;
    }

    public void setAvatar_id(long avatar_id) {
        this.avatar_id = avatar_id;
    }

    /** To-one relationship, resolved on first access. */
    public Avatars getAvatars() {
        long __key = this.avatar_id;
        if (avatars__resolvedKey == null || !avatars__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AvatarsDao targetDao = daoSession.getAvatarsDao();
            Avatars avatarsNew = targetDao.load(__key);
            synchronized (this) {
                avatars = avatarsNew;
            	avatars__resolvedKey = __key;
            }
        }
        return avatars;
    }

    public void setAvatars(Avatars avatars) {
        if (avatars == null) {
            throw new DaoException("To-one property 'avatar_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.avatars = avatars;
            avatar_id = avatars.getId();
            avatars__resolvedKey = avatar_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
