package arrunchez.baumsoft.con.lafamiliaarrunchez.gendao;

import arrunchez.baumsoft.con.lafamiliaarrunchez.gendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CALIDIENTES".
 */
public class Calidientes {

    private Long id;
    private Boolean estado;
    private long calificacion_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CalidientesDao myDao;

    private Calificaciones calificaciones;
    private Long calificaciones__resolvedKey;


    public Calidientes() {
    }

    public Calidientes(Long id) {
        this.id = id;
    }

    public Calidientes(Long id, Boolean estado, long calificacion_id) {
        this.id = id;
        this.estado = estado;
        this.calificacion_id = calificacion_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCalidientesDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Boolean getEstado() {
        return estado;
    }

    public void setEstado(Boolean estado) {
        this.estado = estado;
    }

    public long getCalificacion_id() {
        return calificacion_id;
    }

    public void setCalificacion_id(long calificacion_id) {
        this.calificacion_id = calificacion_id;
    }

    /** To-one relationship, resolved on first access. */
    public Calificaciones getCalificaciones() {
        long __key = this.calificacion_id;
        if (calificaciones__resolvedKey == null || !calificaciones__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CalificacionesDao targetDao = daoSession.getCalificacionesDao();
            Calificaciones calificacionesNew = targetDao.load(__key);
            synchronized (this) {
                calificaciones = calificacionesNew;
            	calificaciones__resolvedKey = __key;
            }
        }
        return calificaciones;
    }

    public void setCalificaciones(Calificaciones calificaciones) {
        if (calificaciones == null) {
            throw new DaoException("To-one property 'calificacion_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.calificaciones = calificaciones;
            calificacion_id = calificaciones.getId();
            calificaciones__resolvedKey = calificacion_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
